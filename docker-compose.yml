version: "3.9"
services:

  #Eureka
  registry-service:
    build:
      context: ./server/registry-service
      dockerfile: Dockerfile
    image: registry-service
    expose:
      - 8761
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10


  #Configuration-service
  config-service:
    build:
      context: ./server/config-service
      dockerfile: Dockerfile
    image: config-service
    expose:
      - 8001
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      registry-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10


  #Gateway-service
  gateway-service:
    build:
      context: ./server/gateway-service
      dockerfile: Dockerfile
    image: gateway-service
    ports:
      - 8080:8080
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      games-service:
        condition: service_healthy
      orders-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      login-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10


  #Games-service
  games-service:
    build:
      context: ./server/games-service
      dockerfile: Dockerfile
    image: games-service
    expose:
      - 8081
    environment:
      - POSTGRES_DB=games-service-database
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      games-service-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/games/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10



  #Login-service
  login-service:
    build:
      context: ./server/login-service
      dockerfile: Dockerfile
    image: login-service
    expose:
      - 8082
    environment:
      - POSTGRES_DB=login-service-database
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      login-service-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/login/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10

  #Orders-service
  orders-service:
    build:
      context: ./server/orders-service
      dockerfile: Dockerfile
    image: orders-service
    expose:
      - 8084
    environment:
      - POSTGRES_DB=orders-service-database
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      orders-service-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/orders/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10



  #Cart-service
  cart-service:
    build:
      context: ./server/cart-service
      dockerfile: Dockerfile
    image: cart-service
    expose:
      - 8083
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      redis-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/cart/actuator/health" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10


#  #Client-application
#  client-application:
#    build:
#      context: ./client
#      dockerfile: Dockerfile
#    image: client-application
#    ports:
#      - 5173:5173
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    depends_on:
#      gateway-service:
#        condition: service_healthy




  #Postgres games-service database
  games-service-db:
    image: postgres:14
    restart: always
    secrets:
      - db-password
    volumes:
      - games-service-db-data:/var/lib/postgresql/data
    networks:
      - private
    environment:
      - POSTGRES_DB=games-service-database
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    expose:
      - 5432
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U postgres -d games-service-database"]
       start_period: 30s
       interval: 5s
       timeout: 10s
       retries: 10

  #Postgres login-service database
  login-service-db:
    image: postgres:14
    restart: always
    secrets:
      - db-password
    volumes:
      - login-service-db-data:/var/lib/postgresql/data
    networks:
      - private
    environment:
      - POSTGRES_DB=login-service-database
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d login-service-database"]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10

  #Postgres orders-service database
  orders-service-db:
    image: postgres:14
    restart: always
    secrets:
      - db-password
    volumes:
      - orders-service-db-data:/var/lib/postgresql/data
    networks:
      - private
    environment:
      - POSTGRES_DB=orders-service-database
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orders-service-database"]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10

  #Cart redis db
  redis-db:
    image: redis:7
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    expose:
      - 6379
    networks:
      - private
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10

  #Zookeeper server
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    expose:
      - 2181
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "bash", "-c", "unset" , "JMX_PORT" ,";" ,"kafka-topics.sh","--zookeeper","zookeeper:2181","--list"]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10


  #Kafka server
  kafka:
    image: 'bitnami/kafka:latest'
    expose:
      - 9092
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    environment:
      - KAFKA_BROKER_ID= 1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --describe"]
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10



volumes:
  login-service-db-data:
  games-service-db-data:
  orders-service-db-data:

secrets:
  db-password:
    file: deploy/db-password.txt

networks:
  private:
    driver: bridge