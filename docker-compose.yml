version: "3.9"
services:

  #Eureka
  registry-service:
    build:
      context: ./server/registry-service
      dockerfile: Dockerfile
    image: registry-service
    ports:
      - 0:8761
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 10


  #Configuration-service
  config-service:
    build:
      context: ./server/config-service
      dockerfile: Dockerfile
    image: config-service
    expose:
      - 8001
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      registry-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/actuator/health" ]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 10


  #Gateway-service
  gateway-service:
    build:
      context: ./server/gateway-service
      dockerfile: Dockerfile
    image: gateway-service
    ports:
      - 8080:8080
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      games-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 10


  #Games-service
  games-service:
    build:
      context: ./server/games-service
      dockerfile: Dockerfile
    image: games-service
    expose:
      - 8081
    environment:
      - POSTGRES_DB=games-service-database
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - private
    depends_on:
      games-service-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/games/actuator/health" ]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 10



#  #Login-service
#  login-service:
#    build:
#      context: ./server/login-service
#      dockerfile: Dockerfile
#    image: login-service
#    expose:
#      - 8081
#    environment:
#      - POSTGRES_DB=login-service-database
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    depends_on:
#      config-service:
#        condition: service_healthy

#  #Orders-service
#  orders-service:
#    build:
#      context: ./server/orders-service
#      dockerfile: Dockerfile
#    image: orders-service
#    expose:
#      - 8084
#    environment:
#      - POSTGRES_DB=orders-service-database
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    depends_on:
#      config-service:
#        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8084/orders/actuator/health" ]
#      start_period: 10s
#      interval: 15s
#      timeout: 5s
#      retries: 10



#  #Cart-service
#  cart-service:
#    build:
#      context: ./server/cart-service
#      dockerfile: Dockerfile
#    image: cart-service
#    expose:
#      - 8083
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    depends_on:
#      config-service:
#        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8083/cart/actuator/health" ]
#      start_period: 10s
#      interval: 15s
#      timeout: 5s
#      retries: 20


  #Postgres games-service database
  games-service-db:
    image: postgres
    restart: always
    secrets:
      - db-password
    volumes:
      - games-service-db-data:/var/lib/postgresql/data
    networks:
      - private
    environment:
      - POSTGRES_DB=games-service-database
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    expose:
      - 5432
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U postgres -d games-service-database"]
       start_period: 10s
       interval: 15s
       timeout: 5s
       retries: 10
#
#  #Postgres login-service database
#  login-service-db:
#    image: postgres
#    restart: always
#    secrets:
#      - db-password
#    volumes:
#      - login-service-db-data:/var/lib/postgresql/data
#    networks:
#      - private
#    environment:
#      - POSTGRES_DB=login-service-database
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    expose:
#      - 5432
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres -d login-service-database"]
#      start_period: 10s
#      interval: 15s
#      timeout: 5s
#      retries: 10

#  #Postgres orders-service database
#  orders-service-db:
#    image: postgres
#    restart: always
#    secrets:
#      - db-password
#    volumes:
#      - orders-service-db-data:/var/lib/postgresql/data
#    networks:
#      - private
#    environment:
#      - POSTGRES_DB=orders-service-database
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    expose:
#      - 5432
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres -d orders-service-database"]
#      start_period: 10s
#      interval: 15s
#      timeout: 5s
#      retries: 10

#  #Cart redis db
#  redis-db:
#    image: redis
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    expose:
#      - 6379
#    networks:
#      - private
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]
#      interval: 1s
#      timeout: 3s
#      retries: 30

#  #Zookeeper server
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - 22181:2181
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    healthcheck:
#      test: nc -z localhost 2181 || exit -1
#      start_period: 30s
#      interval: 5s
#      timeout: 10s
#      retries: 5

#  #Kafka server
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      zookeeper:
#        condition: service_healthy
#
#    ports:
#      - 29092:29092
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    deploy:
#      mode: replicated
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    networks:
#      - private
#    healthcheck:
#      test: [ "CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181" ]
#      start_period: 30s
#      interval: 5s
#      timeout: 10s
#      retries: 10


volumes:
  login-service-db-data:
  games-service-db-data:
  orders-service-db-data:

secrets:
  db-password:
    file: deploy/db-password.txt

networks:
  private:
    driver: bridge